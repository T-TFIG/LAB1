
LAB1_HW_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800278c  0800278c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a4  080027a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027ac  080027ac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027ac  080027ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080027b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000010  080027c4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080027c4  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078af  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001333  00000000  00000000  000278ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  00028c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  00029270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014801  00000000  00000000  00029850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007945  00000000  00000000  0003e051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008186c  00000000  00000000  00045996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7202  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018c8  00000000  00000000  000c7254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002774 	.word	0x08002774

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08002774 	.word	0x08002774

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <assign>:

///tester Key_R1 = { GPIOC, GPIO_PIN_9 };
//tester Key_R2 = { GPIOC, GPIO_PIN_8 };
//tester Key_R3 = { GPIOB, GPIO_PIN_8 };
//tester Key_R4 = { GPIOC, GPIO_PIN_6 };
void assign(){
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
	for(int var = 0; var < 16; var++){
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	e00a      	b.n	80004fe <assign+0x22>
		assign_button[var] = keep_button[var];
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <assign+0x38>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004f0:	4909      	ldr	r1, [pc, #36]	; (8000518 <assign+0x3c>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int var = 0; var < 16; var++){
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3301      	adds	r3, #1
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2b0f      	cmp	r3, #15
 8000502:	ddf1      	ble.n	80004e8 <assign+0xc>
	}
}
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000070 	.word	0x20000070
 8000518:	200000b0 	.word	0x200000b0

0800051c <get_val>:
void reset(char GPIO[], int GPIO_PIN) {
	GPIO_PinState LOW = 0;
	HAL_GPIO_WritePin(GPIO, GPIO_PIN, LOW);
}

void get_val(int case_num) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

	current_button = 0;
 8000524:	4b29      	ldr	r3, [pc, #164]	; (80005cc <get_val+0xb0>)
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]

	keep_button[case_num * 4] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 800052a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052e:	4828      	ldr	r0, [pc, #160]	; (80005d0 <get_val+0xb4>)
 8000530:	f001 f968 	bl	8001804 <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4611      	mov	r1, r2
 800053e:	4a25      	ldr	r2, [pc, #148]	; (80005d4 <get_val+0xb8>)
 8000540:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	keep_button[case_num * 4 + 1] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8000544:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000548:	4821      	ldr	r0, [pc, #132]	; (80005d0 <get_val+0xb4>)
 800054a:	f001 f95b 	bl	8001804 <HAL_GPIO_ReadPin>
 800054e:	4603      	mov	r3, r0
 8000550:	461a      	mov	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	3301      	adds	r3, #1
 8000558:	4611      	mov	r1, r2
 800055a:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <get_val+0xb8>)
 800055c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	keep_button[case_num * 4 + 2] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8000560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000564:	481a      	ldr	r0, [pc, #104]	; (80005d0 <get_val+0xb4>)
 8000566:	f001 f94d 	bl	8001804 <HAL_GPIO_ReadPin>
 800056a:	4603      	mov	r3, r0
 800056c:	461a      	mov	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	3302      	adds	r3, #2
 8000574:	4611      	mov	r1, r2
 8000576:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <get_val+0xb8>)
 8000578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	keep_button[case_num * 4 + 3] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2);
 800057c:	2104      	movs	r1, #4
 800057e:	4816      	ldr	r0, [pc, #88]	; (80005d8 <get_val+0xbc>)
 8000580:	f001 f940 	bl	8001804 <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	461a      	mov	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	3303      	adds	r3, #3
 800058e:	4611      	mov	r1, r2
 8000590:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <get_val+0xb8>)
 8000592:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


	for(int var = 0;var < case_num * 4 + 4;var++){
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	e00c      	b.n	80005b6 <get_val+0x9a>
		if(keep_button[var] == 0){
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <get_val+0xb8>)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d103      	bne.n	80005b0 <get_val+0x94>
			current_button = 1;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <get_val+0xb0>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	601a      	str	r2, [r3, #0]
			break;
 80005ae:	e009      	b.n	80005c4 <get_val+0xa8>
	for(int var = 0;var < case_num * 4 + 4;var++){
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3301      	adds	r3, #1
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3301      	adds	r3, #1
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	429a      	cmp	r2, r3
 80005c0:	dbec      	blt.n	800059c <get_val+0x80>
		}
	}

}
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000f4 	.word	0x200000f4
 80005d0:	40020800 	.word	0x40020800
 80005d4:	20000070 	.word	0x20000070
 80005d8:	40020c00 	.word	0x40020c00

080005dc <see_val>:

int see_val() {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
	for (int var = 0; var < 16; ++var) {
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	e00b      	b.n	8000600 <see_val+0x24>
		if (assign_button[var] == 0) {
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <see_val+0x38>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d102      	bne.n	80005fa <see_val+0x1e>
			return var+1;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3301      	adds	r3, #1
 80005f8:	e005      	b.n	8000606 <see_val+0x2a>
	for (int var = 0; var < 16; ++var) {
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3301      	adds	r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b0f      	cmp	r3, #15
 8000604:	ddf0      	ble.n	80005e8 <see_val+0xc>
		}
	}
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	200000b0 	.word	0x200000b0

08000618 <light_an_led>:

void light_an_led() {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	GPIO_PinState HIGH = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, HIGH);
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	461a      	mov	r2, r3
 8000626:	2120      	movs	r1, #32
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <light_an_led+0x20>)
 800062a:	f001 f903 	bl	8001834 <HAL_GPIO_WritePin>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40020000 	.word	0x40020000

0800063c <lid_an_led>:

void lid_an_led(){
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	GPIO_PinState LOW = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, LOW);
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	461a      	mov	r2, r3
 800064a:	2120      	movs	r1, #32
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <lid_an_led+0x20>)
 800064e:	f001 f8f1 	bl	8001834 <HAL_GPIO_WritePin>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40020000 	.word	0x40020000

08000660 <check_it>:

void check_it(){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	static int check = 0;
//	GPIO_PinState Debug = 1;
	switch (check) {
 8000664:	4bbf      	ldr	r3, [pc, #764]	; (8000964 <check_it+0x304>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b63      	cmp	r3, #99	; 0x63
 800066a:	f200 82fd 	bhi.w	8000c68 <check_it+0x608>
 800066e:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <check_it+0x14>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	08000805 	.word	0x08000805
 8000678:	08000851 	.word	0x08000851
 800067c:	0800089d 	.word	0x0800089d
 8000680:	080008e9 	.word	0x080008e9
 8000684:	08000935 	.word	0x08000935
 8000688:	0800098f 	.word	0x0800098f
 800068c:	080009db 	.word	0x080009db
 8000690:	08000a27 	.word	0x08000a27
 8000694:	08000a73 	.word	0x08000a73
 8000698:	08000abf 	.word	0x08000abf
 800069c:	08000b0b 	.word	0x08000b0b
 80006a0:	08000b57 	.word	0x08000b57
 80006a4:	08000ba1 	.word	0x08000ba1
 80006a8:	08000c69 	.word	0x08000c69
 80006ac:	08000c69 	.word	0x08000c69
 80006b0:	08000c69 	.word	0x08000c69
 80006b4:	08000c69 	.word	0x08000c69
 80006b8:	08000c69 	.word	0x08000c69
 80006bc:	08000c69 	.word	0x08000c69
 80006c0:	08000c69 	.word	0x08000c69
 80006c4:	08000c69 	.word	0x08000c69
 80006c8:	08000c69 	.word	0x08000c69
 80006cc:	08000c69 	.word	0x08000c69
 80006d0:	08000c69 	.word	0x08000c69
 80006d4:	08000c69 	.word	0x08000c69
 80006d8:	08000c69 	.word	0x08000c69
 80006dc:	08000c69 	.word	0x08000c69
 80006e0:	08000c69 	.word	0x08000c69
 80006e4:	08000c69 	.word	0x08000c69
 80006e8:	08000c69 	.word	0x08000c69
 80006ec:	08000c69 	.word	0x08000c69
 80006f0:	08000c69 	.word	0x08000c69
 80006f4:	08000c69 	.word	0x08000c69
 80006f8:	08000c69 	.word	0x08000c69
 80006fc:	08000c69 	.word	0x08000c69
 8000700:	08000c69 	.word	0x08000c69
 8000704:	08000c69 	.word	0x08000c69
 8000708:	08000c69 	.word	0x08000c69
 800070c:	08000c69 	.word	0x08000c69
 8000710:	08000c69 	.word	0x08000c69
 8000714:	08000c69 	.word	0x08000c69
 8000718:	08000c69 	.word	0x08000c69
 800071c:	08000c69 	.word	0x08000c69
 8000720:	08000c69 	.word	0x08000c69
 8000724:	08000c69 	.word	0x08000c69
 8000728:	08000c69 	.word	0x08000c69
 800072c:	08000c69 	.word	0x08000c69
 8000730:	08000c69 	.word	0x08000c69
 8000734:	08000c69 	.word	0x08000c69
 8000738:	08000c69 	.word	0x08000c69
 800073c:	08000c69 	.word	0x08000c69
 8000740:	08000c69 	.word	0x08000c69
 8000744:	08000c69 	.word	0x08000c69
 8000748:	08000c69 	.word	0x08000c69
 800074c:	08000c69 	.word	0x08000c69
 8000750:	08000c69 	.word	0x08000c69
 8000754:	08000c69 	.word	0x08000c69
 8000758:	08000c69 	.word	0x08000c69
 800075c:	08000c69 	.word	0x08000c69
 8000760:	08000c69 	.word	0x08000c69
 8000764:	08000c69 	.word	0x08000c69
 8000768:	08000c69 	.word	0x08000c69
 800076c:	08000c69 	.word	0x08000c69
 8000770:	08000c69 	.word	0x08000c69
 8000774:	08000c69 	.word	0x08000c69
 8000778:	08000c69 	.word	0x08000c69
 800077c:	08000c69 	.word	0x08000c69
 8000780:	08000c69 	.word	0x08000c69
 8000784:	08000c69 	.word	0x08000c69
 8000788:	08000c69 	.word	0x08000c69
 800078c:	08000c69 	.word	0x08000c69
 8000790:	08000c69 	.word	0x08000c69
 8000794:	08000c69 	.word	0x08000c69
 8000798:	08000c69 	.word	0x08000c69
 800079c:	08000c69 	.word	0x08000c69
 80007a0:	08000c69 	.word	0x08000c69
 80007a4:	08000c69 	.word	0x08000c69
 80007a8:	08000c69 	.word	0x08000c69
 80007ac:	08000c69 	.word	0x08000c69
 80007b0:	08000c69 	.word	0x08000c69
 80007b4:	08000c69 	.word	0x08000c69
 80007b8:	08000c69 	.word	0x08000c69
 80007bc:	08000c69 	.word	0x08000c69
 80007c0:	08000c69 	.word	0x08000c69
 80007c4:	08000c69 	.word	0x08000c69
 80007c8:	08000c69 	.word	0x08000c69
 80007cc:	08000c69 	.word	0x08000c69
 80007d0:	08000c69 	.word	0x08000c69
 80007d4:	08000c69 	.word	0x08000c69
 80007d8:	08000c69 	.word	0x08000c69
 80007dc:	08000c69 	.word	0x08000c69
 80007e0:	08000c69 	.word	0x08000c69
 80007e4:	08000c69 	.word	0x08000c69
 80007e8:	08000c69 	.word	0x08000c69
 80007ec:	08000c69 	.word	0x08000c69
 80007f0:	08000c69 	.word	0x08000c69
 80007f4:	08000c69 	.word	0x08000c69
 80007f8:	08000c69 	.word	0x08000c69
 80007fc:	08000c69 	.word	0x08000c69
 8000800:	08000be5 	.word	0x08000be5
		case 0:
			last_state = 0;
 8000804:	4b58      	ldr	r3, [pc, #352]	; (8000968 <check_it+0x308>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
			if (see_val() == 10) {
 800080a:	f7ff fee7 	bl	80005dc <see_val>
 800080e:	4603      	mov	r3, r0
 8000810:	2b0a      	cmp	r3, #10
 8000812:	d105      	bne.n	8000820 <check_it+0x1c0>
				check += 1; //6
 8000814:	4b53      	ldr	r3, [pc, #332]	; (8000964 <check_it+0x304>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3301      	adds	r3, #1
 800081a:	4a52      	ldr	r2, [pc, #328]	; (8000964 <check_it+0x304>)
 800081c:	6013      	str	r3, [r2, #0]
				check = 0;
			} else if (see_val() != 10){
				check = 99;
				error_count++;
			}
			break;
 800081e:	e208      	b.n	8000c32 <check_it+0x5d2>
			} else if (see_val() == 13) {
 8000820:	f7ff fedc 	bl	80005dc <see_val>
 8000824:	4603      	mov	r3, r0
 8000826:	2b0d      	cmp	r3, #13
 8000828:	d103      	bne.n	8000832 <check_it+0x1d2>
				check = 0;
 800082a:	4b4e      	ldr	r3, [pc, #312]	; (8000964 <check_it+0x304>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
			break;
 8000830:	e1ff      	b.n	8000c32 <check_it+0x5d2>
			} else if (see_val() != 10){
 8000832:	f7ff fed3 	bl	80005dc <see_val>
 8000836:	4603      	mov	r3, r0
 8000838:	2b0a      	cmp	r3, #10
 800083a:	f000 81fa 	beq.w	8000c32 <check_it+0x5d2>
				check = 99;
 800083e:	4b49      	ldr	r3, [pc, #292]	; (8000964 <check_it+0x304>)
 8000840:	2263      	movs	r2, #99	; 0x63
 8000842:	601a      	str	r2, [r3, #0]
				error_count++;
 8000844:	4b49      	ldr	r3, [pc, #292]	; (800096c <check_it+0x30c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3301      	adds	r3, #1
 800084a:	4a48      	ldr	r2, [pc, #288]	; (800096c <check_it+0x30c>)
 800084c:	6013      	str	r3, [r2, #0]
			break;
 800084e:	e1f0      	b.n	8000c32 <check_it+0x5d2>
		case 1:
			last_state = 1;
 8000850:	4b45      	ldr	r3, [pc, #276]	; (8000968 <check_it+0x308>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
			if (see_val() == 2) {
 8000856:	f7ff fec1 	bl	80005dc <see_val>
 800085a:	4603      	mov	r3, r0
 800085c:	2b02      	cmp	r3, #2
 800085e:	d105      	bne.n	800086c <check_it+0x20c>
				check += 1; //64
 8000860:	4b40      	ldr	r3, [pc, #256]	; (8000964 <check_it+0x304>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	4a3f      	ldr	r2, [pc, #252]	; (8000964 <check_it+0x304>)
 8000868:	6013      	str	r3, [r2, #0]
				check = 0;
			} else if (see_val() != 2){
				check = 99;
				error_count++;
			}
			break;
 800086a:	e1e4      	b.n	8000c36 <check_it+0x5d6>
			} else if (see_val() == 13) {
 800086c:	f7ff feb6 	bl	80005dc <see_val>
 8000870:	4603      	mov	r3, r0
 8000872:	2b0d      	cmp	r3, #13
 8000874:	d103      	bne.n	800087e <check_it+0x21e>
				check = 0;
 8000876:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <check_it+0x304>)
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
			break;
 800087c:	e1db      	b.n	8000c36 <check_it+0x5d6>
			} else if (see_val() != 2){
 800087e:	f7ff fead 	bl	80005dc <see_val>
 8000882:	4603      	mov	r3, r0
 8000884:	2b02      	cmp	r3, #2
 8000886:	f000 81d6 	beq.w	8000c36 <check_it+0x5d6>
				check = 99;
 800088a:	4b36      	ldr	r3, [pc, #216]	; (8000964 <check_it+0x304>)
 800088c:	2263      	movs	r2, #99	; 0x63
 800088e:	601a      	str	r2, [r3, #0]
				error_count++;
 8000890:	4b36      	ldr	r3, [pc, #216]	; (800096c <check_it+0x30c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a35      	ldr	r2, [pc, #212]	; (800096c <check_it+0x30c>)
 8000898:	6013      	str	r3, [r2, #0]
			break;
 800089a:	e1cc      	b.n	8000c36 <check_it+0x5d6>
		case 2:
		    last_state = 2;
 800089c:	4b32      	ldr	r3, [pc, #200]	; (8000968 <check_it+0x308>)
 800089e:	2202      	movs	r2, #2
 80008a0:	601a      	str	r2, [r3, #0]
			if (see_val() == 11) {
 80008a2:	f7ff fe9b 	bl	80005dc <see_val>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b0b      	cmp	r3, #11
 80008aa:	d105      	bne.n	80008b8 <check_it+0x258>
				check += 1; //643
 80008ac:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <check_it+0x304>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	4a2c      	ldr	r2, [pc, #176]	; (8000964 <check_it+0x304>)
 80008b4:	6013      	str	r3, [r2, #0]
				check = 0;
			} else if (see_val() != 11){
				check = 99;
				error_count++;
			}
			break;
 80008b6:	e1c0      	b.n	8000c3a <check_it+0x5da>
			} else if (see_val() == 13) {
 80008b8:	f7ff fe90 	bl	80005dc <see_val>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b0d      	cmp	r3, #13
 80008c0:	d103      	bne.n	80008ca <check_it+0x26a>
				check = 0;
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <check_it+0x304>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
			break;
 80008c8:	e1b7      	b.n	8000c3a <check_it+0x5da>
			} else if (see_val() != 11){
 80008ca:	f7ff fe87 	bl	80005dc <see_val>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b0b      	cmp	r3, #11
 80008d2:	f000 81b2 	beq.w	8000c3a <check_it+0x5da>
				check = 99;
 80008d6:	4b23      	ldr	r3, [pc, #140]	; (8000964 <check_it+0x304>)
 80008d8:	2263      	movs	r2, #99	; 0x63
 80008da:	601a      	str	r2, [r3, #0]
				error_count++;
 80008dc:	4b23      	ldr	r3, [pc, #140]	; (800096c <check_it+0x30c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	4a22      	ldr	r2, [pc, #136]	; (800096c <check_it+0x30c>)
 80008e4:	6013      	str	r3, [r2, #0]
			break;
 80008e6:	e1a8      	b.n	8000c3a <check_it+0x5da>
		case 3:
			last_state = 3;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <check_it+0x308>)
 80008ea:	2203      	movs	r2, #3
 80008ec:	601a      	str	r2, [r3, #0]
			if (see_val() == 2) {
 80008ee:	f7ff fe75 	bl	80005dc <see_val>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d105      	bne.n	8000904 <check_it+0x2a4>
				check += 1; //6434
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <check_it+0x304>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	4a19      	ldr	r2, [pc, #100]	; (8000964 <check_it+0x304>)
 8000900:	6013      	str	r3, [r2, #0]
				check = 0;
			} else if (see_val() != 2){
				check = 99;
				error_count++;
			}
			break;
 8000902:	e19c      	b.n	8000c3e <check_it+0x5de>
			} else if (see_val() == 13) {
 8000904:	f7ff fe6a 	bl	80005dc <see_val>
 8000908:	4603      	mov	r3, r0
 800090a:	2b0d      	cmp	r3, #13
 800090c:	d103      	bne.n	8000916 <check_it+0x2b6>
				check = 0;
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <check_it+0x304>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
			break;
 8000914:	e193      	b.n	8000c3e <check_it+0x5de>
			} else if (see_val() != 2){
 8000916:	f7ff fe61 	bl	80005dc <see_val>
 800091a:	4603      	mov	r3, r0
 800091c:	2b02      	cmp	r3, #2
 800091e:	f000 818e 	beq.w	8000c3e <check_it+0x5de>
				check = 99;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <check_it+0x304>)
 8000924:	2263      	movs	r2, #99	; 0x63
 8000926:	601a      	str	r2, [r3, #0]
				error_count++;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <check_it+0x30c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	4a0f      	ldr	r2, [pc, #60]	; (800096c <check_it+0x30c>)
 8000930:	6013      	str	r3, [r2, #0]
			break;
 8000932:	e184      	b.n	8000c3e <check_it+0x5de>
		case 4:
			last_state = 4;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <check_it+0x308>)
 8000936:	2204      	movs	r2, #4
 8000938:	601a      	str	r2, [r3, #0]
			if (see_val() == 4) {
 800093a:	f7ff fe4f 	bl	80005dc <see_val>
 800093e:	4603      	mov	r3, r0
 8000940:	2b04      	cmp	r3, #4
 8000942:	d105      	bne.n	8000950 <check_it+0x2f0>
				check += 1; //64340
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <check_it+0x304>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	4a06      	ldr	r2, [pc, #24]	; (8000964 <check_it+0x304>)
 800094c:	6013      	str	r3, [r2, #0]
				check = 0;
			} else if (see_val() != 4){
				check = 99;
				error_count++;
			}
			break;
 800094e:	e178      	b.n	8000c42 <check_it+0x5e2>
			} else if (see_val() == 13) {
 8000950:	f7ff fe44 	bl	80005dc <see_val>
 8000954:	4603      	mov	r3, r0
 8000956:	2b0d      	cmp	r3, #13
 8000958:	d10a      	bne.n	8000970 <check_it+0x310>
				check = 0;
 800095a:	4b02      	ldr	r3, [pc, #8]	; (8000964 <check_it+0x304>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
			break;
 8000960:	e16f      	b.n	8000c42 <check_it+0x5e2>
 8000962:	bf00      	nop
 8000964:	20000104 	.word	0x20000104
 8000968:	20000100 	.word	0x20000100
 800096c:	200000fc 	.word	0x200000fc
			} else if (see_val() != 4){
 8000970:	f7ff fe34 	bl	80005dc <see_val>
 8000974:	4603      	mov	r3, r0
 8000976:	2b04      	cmp	r3, #4
 8000978:	f000 8163 	beq.w	8000c42 <check_it+0x5e2>
				check = 99;
 800097c:	4b96      	ldr	r3, [pc, #600]	; (8000bd8 <check_it+0x578>)
 800097e:	2263      	movs	r2, #99	; 0x63
 8000980:	601a      	str	r2, [r3, #0]
				error_count++;
 8000982:	4b96      	ldr	r3, [pc, #600]	; (8000bdc <check_it+0x57c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	4a94      	ldr	r2, [pc, #592]	; (8000bdc <check_it+0x57c>)
 800098a:	6013      	str	r3, [r2, #0]
			break;
 800098c:	e159      	b.n	8000c42 <check_it+0x5e2>
		case 5:
			last_state = 5;
 800098e:	4b94      	ldr	r3, [pc, #592]	; (8000be0 <check_it+0x580>)
 8000990:	2205      	movs	r2, #5
 8000992:	601a      	str	r2, [r3, #0]
			if (see_val() == 6) {
 8000994:	f7ff fe22 	bl	80005dc <see_val>
 8000998:	4603      	mov	r3, r0
 800099a:	2b06      	cmp	r3, #6
 800099c:	d105      	bne.n	80009aa <check_it+0x34a>
				check += 1; //643405
 800099e:	4b8e      	ldr	r3, [pc, #568]	; (8000bd8 <check_it+0x578>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	4a8c      	ldr	r2, [pc, #560]	; (8000bd8 <check_it+0x578>)
 80009a6:	6013      	str	r3, [r2, #0]
				check = 0;
			} else if (see_val() != 6){
				check = 99;
				error_count++;
			}
			break;
 80009a8:	e14d      	b.n	8000c46 <check_it+0x5e6>
			} else if (see_val() == 13) {
 80009aa:	f7ff fe17 	bl	80005dc <see_val>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b0d      	cmp	r3, #13
 80009b2:	d103      	bne.n	80009bc <check_it+0x35c>
				check = 0;
 80009b4:	4b88      	ldr	r3, [pc, #544]	; (8000bd8 <check_it+0x578>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
			break;
 80009ba:	e144      	b.n	8000c46 <check_it+0x5e6>
			} else if (see_val() != 6){
 80009bc:	f7ff fe0e 	bl	80005dc <see_val>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	f000 813f 	beq.w	8000c46 <check_it+0x5e6>
				check = 99;
 80009c8:	4b83      	ldr	r3, [pc, #524]	; (8000bd8 <check_it+0x578>)
 80009ca:	2263      	movs	r2, #99	; 0x63
 80009cc:	601a      	str	r2, [r3, #0]
				error_count++;
 80009ce:	4b83      	ldr	r3, [pc, #524]	; (8000bdc <check_it+0x57c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	4a81      	ldr	r2, [pc, #516]	; (8000bdc <check_it+0x57c>)
 80009d6:	6013      	str	r3, [r2, #0]
			break;
 80009d8:	e135      	b.n	8000c46 <check_it+0x5e6>
		case 6:
			last_state = 6;
 80009da:	4b81      	ldr	r3, [pc, #516]	; (8000be0 <check_it+0x580>)
 80009dc:	2206      	movs	r2, #6
 80009de:	601a      	str	r2, [r3, #0]
			if (see_val() == 4) {
 80009e0:	f7ff fdfc 	bl	80005dc <see_val>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d105      	bne.n	80009f6 <check_it+0x396>
				check += 1; //6434050
 80009ea:	4b7b      	ldr	r3, [pc, #492]	; (8000bd8 <check_it+0x578>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	3301      	adds	r3, #1
 80009f0:	4a79      	ldr	r2, [pc, #484]	; (8000bd8 <check_it+0x578>)
 80009f2:	6013      	str	r3, [r2, #0]
				check = 0;
			} else if (see_val() != 4){
				check = 99;
				error_count++;
			}
			break;
 80009f4:	e129      	b.n	8000c4a <check_it+0x5ea>
			} else if (see_val() == 13) {
 80009f6:	f7ff fdf1 	bl	80005dc <see_val>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b0d      	cmp	r3, #13
 80009fe:	d103      	bne.n	8000a08 <check_it+0x3a8>
				check = 0;
 8000a00:	4b75      	ldr	r3, [pc, #468]	; (8000bd8 <check_it+0x578>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
			break;
 8000a06:	e120      	b.n	8000c4a <check_it+0x5ea>
			} else if (see_val() != 4){
 8000a08:	f7ff fde8 	bl	80005dc <see_val>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	f000 811b 	beq.w	8000c4a <check_it+0x5ea>
				check = 99;
 8000a14:	4b70      	ldr	r3, [pc, #448]	; (8000bd8 <check_it+0x578>)
 8000a16:	2263      	movs	r2, #99	; 0x63
 8000a18:	601a      	str	r2, [r3, #0]
				error_count++;
 8000a1a:	4b70      	ldr	r3, [pc, #448]	; (8000bdc <check_it+0x57c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	4a6e      	ldr	r2, [pc, #440]	; (8000bdc <check_it+0x57c>)
 8000a22:	6013      	str	r3, [r2, #0]
			break;
 8000a24:	e111      	b.n	8000c4a <check_it+0x5ea>
		case 7:
			last_state = 7;
 8000a26:	4b6e      	ldr	r3, [pc, #440]	; (8000be0 <check_it+0x580>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	601a      	str	r2, [r3, #0]
			if (see_val() == 4) {
 8000a2c:	f7ff fdd6 	bl	80005dc <see_val>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d105      	bne.n	8000a42 <check_it+0x3e2>
				check += 1; //64340500
 8000a36:	4b68      	ldr	r3, [pc, #416]	; (8000bd8 <check_it+0x578>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a66      	ldr	r2, [pc, #408]	; (8000bd8 <check_it+0x578>)
 8000a3e:	6013      	str	r3, [r2, #0]
				check = 0;
			} else if (see_val() != 4){
				check = 99;
				error_count++;
			}
			break;
 8000a40:	e105      	b.n	8000c4e <check_it+0x5ee>
			} else if (see_val() == 13) {
 8000a42:	f7ff fdcb 	bl	80005dc <see_val>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b0d      	cmp	r3, #13
 8000a4a:	d103      	bne.n	8000a54 <check_it+0x3f4>
				check = 0;
 8000a4c:	4b62      	ldr	r3, [pc, #392]	; (8000bd8 <check_it+0x578>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
			break;
 8000a52:	e0fc      	b.n	8000c4e <check_it+0x5ee>
			} else if (see_val() != 4){
 8000a54:	f7ff fdc2 	bl	80005dc <see_val>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	f000 80f7 	beq.w	8000c4e <check_it+0x5ee>
				check = 99;
 8000a60:	4b5d      	ldr	r3, [pc, #372]	; (8000bd8 <check_it+0x578>)
 8000a62:	2263      	movs	r2, #99	; 0x63
 8000a64:	601a      	str	r2, [r3, #0]
				error_count++;
 8000a66:	4b5d      	ldr	r3, [pc, #372]	; (8000bdc <check_it+0x57c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a5b      	ldr	r2, [pc, #364]	; (8000bdc <check_it+0x57c>)
 8000a6e:	6013      	str	r3, [r2, #0]
			break;
 8000a70:	e0ed      	b.n	8000c4e <check_it+0x5ee>
		case 8:
			last_state = 8;
 8000a72:	4b5b      	ldr	r3, [pc, #364]	; (8000be0 <check_it+0x580>)
 8000a74:	2208      	movs	r2, #8
 8000a76:	601a      	str	r2, [r3, #0]
			if (see_val() == 4) {
 8000a78:	f7ff fdb0 	bl	80005dc <see_val>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	d105      	bne.n	8000a8e <check_it+0x42e>
				check += 1; //643405000
 8000a82:	4b55      	ldr	r3, [pc, #340]	; (8000bd8 <check_it+0x578>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	4a53      	ldr	r2, [pc, #332]	; (8000bd8 <check_it+0x578>)
 8000a8a:	6013      	str	r3, [r2, #0]
				check = 0;
			} else if (see_val() != 4){
				check = 99;
				error_count++;
			}
			break;
 8000a8c:	e0e1      	b.n	8000c52 <check_it+0x5f2>
			} else if (see_val() == 13) {
 8000a8e:	f7ff fda5 	bl	80005dc <see_val>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b0d      	cmp	r3, #13
 8000a96:	d103      	bne.n	8000aa0 <check_it+0x440>
				check = 0;
 8000a98:	4b4f      	ldr	r3, [pc, #316]	; (8000bd8 <check_it+0x578>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
			break;
 8000a9e:	e0d8      	b.n	8000c52 <check_it+0x5f2>
			} else if (see_val() != 4){
 8000aa0:	f7ff fd9c 	bl	80005dc <see_val>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	f000 80d3 	beq.w	8000c52 <check_it+0x5f2>
				check = 99;
 8000aac:	4b4a      	ldr	r3, [pc, #296]	; (8000bd8 <check_it+0x578>)
 8000aae:	2263      	movs	r2, #99	; 0x63
 8000ab0:	601a      	str	r2, [r3, #0]
				error_count++;
 8000ab2:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <check_it+0x57c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	4a48      	ldr	r2, [pc, #288]	; (8000bdc <check_it+0x57c>)
 8000aba:	6013      	str	r3, [r2, #0]
			break;
 8000abc:	e0c9      	b.n	8000c52 <check_it+0x5f2>
		case 9:
			last_state = 9;
 8000abe:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <check_it+0x580>)
 8000ac0:	2209      	movs	r2, #9
 8000ac2:	601a      	str	r2, [r3, #0]
			if (see_val() == 6) {
 8000ac4:	f7ff fd8a 	bl	80005dc <see_val>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d105      	bne.n	8000ada <check_it+0x47a>
				check += 1; //6434050005
 8000ace:	4b42      	ldr	r3, [pc, #264]	; (8000bd8 <check_it+0x578>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	4a40      	ldr	r2, [pc, #256]	; (8000bd8 <check_it+0x578>)
 8000ad6:	6013      	str	r3, [r2, #0]
				check = 0;
			} else if (see_val() != 6){
				check = 99;
				error_count++;
			}
			break;
 8000ad8:	e0bd      	b.n	8000c56 <check_it+0x5f6>
			} else if (see_val() == 13) {
 8000ada:	f7ff fd7f 	bl	80005dc <see_val>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b0d      	cmp	r3, #13
 8000ae2:	d103      	bne.n	8000aec <check_it+0x48c>
				check = 0;
 8000ae4:	4b3c      	ldr	r3, [pc, #240]	; (8000bd8 <check_it+0x578>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
			break;
 8000aea:	e0b4      	b.n	8000c56 <check_it+0x5f6>
			} else if (see_val() != 6){
 8000aec:	f7ff fd76 	bl	80005dc <see_val>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b06      	cmp	r3, #6
 8000af4:	f000 80af 	beq.w	8000c56 <check_it+0x5f6>
				check = 99;
 8000af8:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <check_it+0x578>)
 8000afa:	2263      	movs	r2, #99	; 0x63
 8000afc:	601a      	str	r2, [r3, #0]
				error_count++;
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <check_it+0x57c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	4a35      	ldr	r2, [pc, #212]	; (8000bdc <check_it+0x57c>)
 8000b06:	6013      	str	r3, [r2, #0]
			break;
 8000b08:	e0a5      	b.n	8000c56 <check_it+0x5f6>
		case 10:
			last_state = 10;
 8000b0a:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <check_it+0x580>)
 8000b0c:	220a      	movs	r2, #10
 8000b0e:	601a      	str	r2, [r3, #0]
			if (see_val() == 5) {
 8000b10:	f7ff fd64 	bl	80005dc <see_val>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	d105      	bne.n	8000b26 <check_it+0x4c6>
				check += 1; //64340500058
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <check_it+0x578>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4a2d      	ldr	r2, [pc, #180]	; (8000bd8 <check_it+0x578>)
 8000b22:	6013      	str	r3, [r2, #0]
				check = 0;
			} else if (see_val() != 5){
				check = 99;
				error_count++;
			}
			break;
 8000b24:	e099      	b.n	8000c5a <check_it+0x5fa>
			} else if (see_val() == 13) {
 8000b26:	f7ff fd59 	bl	80005dc <see_val>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b0d      	cmp	r3, #13
 8000b2e:	d103      	bne.n	8000b38 <check_it+0x4d8>
				check = 0;
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <check_it+0x578>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
			break;
 8000b36:	e090      	b.n	8000c5a <check_it+0x5fa>
			} else if (see_val() != 5){
 8000b38:	f7ff fd50 	bl	80005dc <see_val>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b05      	cmp	r3, #5
 8000b40:	f000 808b 	beq.w	8000c5a <check_it+0x5fa>
				check = 99;
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <check_it+0x578>)
 8000b46:	2263      	movs	r2, #99	; 0x63
 8000b48:	601a      	str	r2, [r3, #0]
				error_count++;
 8000b4a:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <check_it+0x57c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <check_it+0x57c>)
 8000b52:	6013      	str	r3, [r2, #0]
			break;
 8000b54:	e081      	b.n	8000c5a <check_it+0x5fa>
		case 11:
			last_state = 11;
 8000b56:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <check_it+0x580>)
 8000b58:	220b      	movs	r2, #11
 8000b5a:	601a      	str	r2, [r3, #0]
			if (see_val() == 16) {
 8000b5c:	f7ff fd3e 	bl	80005dc <see_val>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b10      	cmp	r3, #16
 8000b64:	d105      	bne.n	8000b72 <check_it+0x512>
				light_an_led();
 8000b66:	f7ff fd57 	bl	8000618 <light_an_led>
				check = 12 ; //OK
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <check_it+0x578>)
 8000b6c:	220c      	movs	r2, #12
 8000b6e:	601a      	str	r2, [r3, #0]
				check = 0;
			} else if (see_val() != 16){
				check = 99;
				error_count++;
			}
			break;
 8000b70:	e075      	b.n	8000c5e <check_it+0x5fe>
			} else if (see_val() == 13) {
 8000b72:	f7ff fd33 	bl	80005dc <see_val>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b0d      	cmp	r3, #13
 8000b7a:	d103      	bne.n	8000b84 <check_it+0x524>
				check = 0;
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <check_it+0x578>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
			break;
 8000b82:	e06c      	b.n	8000c5e <check_it+0x5fe>
			} else if (see_val() != 16){
 8000b84:	f7ff fd2a 	bl	80005dc <see_val>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b10      	cmp	r3, #16
 8000b8c:	d067      	beq.n	8000c5e <check_it+0x5fe>
				check = 99;
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <check_it+0x578>)
 8000b90:	2263      	movs	r2, #99	; 0x63
 8000b92:	601a      	str	r2, [r3, #0]
				error_count++;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <check_it+0x57c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <check_it+0x57c>)
 8000b9c:	6013      	str	r3, [r2, #0]
			break;
 8000b9e:	e05e      	b.n	8000c5e <check_it+0x5fe>
		case 12:
			last_state = 12;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <check_it+0x580>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	601a      	str	r2, [r3, #0]
			if (see_val() == 13){
 8000ba6:	f7ff fd19 	bl	80005dc <see_val>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b0d      	cmp	r3, #13
 8000bae:	d105      	bne.n	8000bbc <check_it+0x55c>
				lid_an_led();
 8000bb0:	f7ff fd44 	bl	800063c <lid_an_led>
				check = 0;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <check_it+0x578>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
			} else if(see_val() != 13){
				check = 99;
				error_count++;
			}
		break;
 8000bba:	e052      	b.n	8000c62 <check_it+0x602>
			} else if(see_val() != 13){
 8000bbc:	f7ff fd0e 	bl	80005dc <see_val>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b0d      	cmp	r3, #13
 8000bc4:	d04d      	beq.n	8000c62 <check_it+0x602>
				check = 99;
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <check_it+0x578>)
 8000bc8:	2263      	movs	r2, #99	; 0x63
 8000bca:	601a      	str	r2, [r3, #0]
				error_count++;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <check_it+0x57c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	4a02      	ldr	r2, [pc, #8]	; (8000bdc <check_it+0x57c>)
 8000bd4:	6013      	str	r3, [r2, #0]
		break;
 8000bd6:	e044      	b.n	8000c62 <check_it+0x602>
 8000bd8:	20000104 	.word	0x20000104
 8000bdc:	200000fc 	.word	0x200000fc
 8000be0:	20000100 	.word	0x20000100
		case 99:
			if(see_val() == 14){
 8000be4:	f7ff fcfa 	bl	80005dc <see_val>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b0e      	cmp	r3, #14
 8000bec:	d104      	bne.n	8000bf8 <check_it+0x598>
				error_count -= 1;
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <check_it+0x60c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <check_it+0x60c>)
 8000bf6:	6013      	str	r3, [r2, #0]
			}
			if(error_count <= 0){
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <check_it+0x60c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	dc04      	bgt.n	8000c0a <check_it+0x5aa>
				check = last_state;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <check_it+0x610>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <check_it+0x614>)
 8000c06:	6013      	str	r3, [r2, #0]
				check = 0;
			}
			else if(see_val() != 14){
				error_count++;
			}
		break;
 8000c08:	e02d      	b.n	8000c66 <check_it+0x606>
			else if(see_val() == 13){
 8000c0a:	f7ff fce7 	bl	80005dc <see_val>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b0d      	cmp	r3, #13
 8000c12:	d103      	bne.n	8000c1c <check_it+0x5bc>
				check = 0;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <check_it+0x614>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
		break;
 8000c1a:	e024      	b.n	8000c66 <check_it+0x606>
			else if(see_val() != 14){
 8000c1c:	f7ff fcde 	bl	80005dc <see_val>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b0e      	cmp	r3, #14
 8000c24:	d01f      	beq.n	8000c66 <check_it+0x606>
				error_count++;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <check_it+0x60c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <check_it+0x60c>)
 8000c2e:	6013      	str	r3, [r2, #0]
		break;
 8000c30:	e019      	b.n	8000c66 <check_it+0x606>
			break;
 8000c32:	bf00      	nop
 8000c34:	e018      	b.n	8000c68 <check_it+0x608>
			break;
 8000c36:	bf00      	nop
 8000c38:	e016      	b.n	8000c68 <check_it+0x608>
			break;
 8000c3a:	bf00      	nop
 8000c3c:	e014      	b.n	8000c68 <check_it+0x608>
			break;
 8000c3e:	bf00      	nop
 8000c40:	e012      	b.n	8000c68 <check_it+0x608>
			break;
 8000c42:	bf00      	nop
 8000c44:	e010      	b.n	8000c68 <check_it+0x608>
			break;
 8000c46:	bf00      	nop
 8000c48:	e00e      	b.n	8000c68 <check_it+0x608>
			break;
 8000c4a:	bf00      	nop
 8000c4c:	e00c      	b.n	8000c68 <check_it+0x608>
			break;
 8000c4e:	bf00      	nop
 8000c50:	e00a      	b.n	8000c68 <check_it+0x608>
			break;
 8000c52:	bf00      	nop
 8000c54:	e008      	b.n	8000c68 <check_it+0x608>
			break;
 8000c56:	bf00      	nop
 8000c58:	e006      	b.n	8000c68 <check_it+0x608>
			break;
 8000c5a:	bf00      	nop
 8000c5c:	e004      	b.n	8000c68 <check_it+0x608>
			break;
 8000c5e:	bf00      	nop
 8000c60:	e002      	b.n	8000c68 <check_it+0x608>
		break;
 8000c62:	bf00      	nop
 8000c64:	e000      	b.n	8000c68 <check_it+0x608>
		break;
 8000c66:	bf00      	nop
//	else if (see_val() != 10){
//					check = 99;
//					error_count++;
//				}

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200000fc 	.word	0x200000fc
 8000c70:	20000100 	.word	0x20000100
 8000c74:	20000104 	.word	0x20000104

08000c78 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c7e:	f000 fae5 	bl	800124c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c82:	f000 f8af 	bl	8000de4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c86:	f000 f941 	bl	8000f0c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000c8a:	f000 f915 	bl	8000eb8 <MX_USART2_UART_Init>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		static uint32_t timestamp1 = 10;
		GPIO_PinState HIGH = 1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	71fb      	strb	r3, [r7, #7]
		GPIO_PinState LOW = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	71bb      	strb	r3, [r7, #6]

		if (timestamp1 <= HAL_GetTick()){
 8000c96:	f000 fb3f 	bl	8001318 <HAL_GetTick>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	4b4b      	ldr	r3, [pc, #300]	; (8000dcc <main+0x154>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	f0c0 8090 	bcc.w	8000dc6 <main+0x14e>
			timestamp1 = HAL_GetTick() + 10;
 8000ca6:	f000 fb37 	bl	8001318 <HAL_GetTick>
 8000caa:	4603      	mov	r3, r0
 8000cac:	330a      	adds	r3, #10
 8000cae:	4a47      	ldr	r2, [pc, #284]	; (8000dcc <main+0x154>)
 8000cb0:	6013      	str	r3, [r2, #0]



			switch(state) {
 8000cb2:	4b47      	ldr	r3, [pc, #284]	; (8000dd0 <main+0x158>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d8e9      	bhi.n	8000c8e <main+0x16>
 8000cba:	a201      	add	r2, pc, #4	; (adr r2, 8000cc0 <main+0x48>)
 8000cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc0:	08000cd1 	.word	0x08000cd1
 8000cc4:	08000d11 	.word	0x08000d11
 8000cc8:	08000d43 	.word	0x08000d43
 8000ccc:	08000d73 	.word	0x08000d73
			case 0:
					//reset(tester[0], tester[2]);
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, LOW);
 8000cd0:	79bb      	ldrb	r3, [r7, #6]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd8:	483e      	ldr	r0, [pc, #248]	; (8000dd4 <main+0x15c>)
 8000cda:	f000 fdab 	bl	8001834 <HAL_GPIO_WritePin>
					get_val(state);
 8000cde:	4b3c      	ldr	r3, [pc, #240]	; (8000dd0 <main+0x158>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fc1a 	bl	800051c <get_val>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, HIGH);
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	461a      	mov	r2, r3
 8000cec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf0:	4838      	ldr	r0, [pc, #224]	; (8000dd4 <main+0x15c>)
 8000cf2:	f000 fd9f 	bl	8001834 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, LOW);
 8000cf6:	79bb      	ldrb	r3, [r7, #6]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfe:	4835      	ldr	r0, [pc, #212]	; (8000dd4 <main+0x15c>)
 8000d00:	f000 fd98 	bl	8001834 <HAL_GPIO_WritePin>
					state++;
 8000d04:	4b32      	ldr	r3, [pc, #200]	; (8000dd0 <main+0x158>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4a31      	ldr	r2, [pc, #196]	; (8000dd0 <main+0x158>)
 8000d0c:	6013      	str	r3, [r2, #0]

					//set(tester[0], tester[2]);

			break;
 8000d0e:	e05b      	b.n	8000dc8 <main+0x150>
			case 1:
	//				reset(tester[0], tester[3]);
					get_val(state);
 8000d10:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <main+0x158>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fc01 	bl	800051c <get_val>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, HIGH);
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d22:	482c      	ldr	r0, [pc, #176]	; (8000dd4 <main+0x15c>)
 8000d24:	f000 fd86 	bl	8001834 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, LOW);
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d30:	4829      	ldr	r0, [pc, #164]	; (8000dd8 <main+0x160>)
 8000d32:	f000 fd7f 	bl	8001834 <HAL_GPIO_WritePin>
					state++;
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <main+0x158>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	4a24      	ldr	r2, [pc, #144]	; (8000dd0 <main+0x158>)
 8000d3e:	6013      	str	r3, [r2, #0]

	//				set(tester[0], tester[3]);



			break;
 8000d40:	e042      	b.n	8000dc8 <main+0x150>
			case 2:
	//				reset(tester[1], tester[3]);
					get_val(state);
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <main+0x158>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fbe8 	bl	800051c <get_val>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, HIGH);
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d54:	4820      	ldr	r0, [pc, #128]	; (8000dd8 <main+0x160>)
 8000d56:	f000 fd6d 	bl	8001834 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, LOW);
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	2140      	movs	r1, #64	; 0x40
 8000d60:	481c      	ldr	r0, [pc, #112]	; (8000dd4 <main+0x15c>)
 8000d62:	f000 fd67 	bl	8001834 <HAL_GPIO_WritePin>
					state++;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <main+0x158>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <main+0x158>)
 8000d6e:	6013      	str	r3, [r2, #0]

	//				set(tester[1], tester[3]);



			break;
 8000d70:	e02a      	b.n	8000dc8 <main+0x150>
			case 3:
	//				reset(tester[0], tester[4]);
					get_val(state);
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <main+0x158>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fbd0 	bl	800051c <get_val>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, HIGH);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	2140      	movs	r1, #64	; 0x40
 8000d82:	4814      	ldr	r0, [pc, #80]	; (8000dd4 <main+0x15c>)
 8000d84:	f000 fd56 	bl	8001834 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, LOW);
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d90:	4810      	ldr	r0, [pc, #64]	; (8000dd4 <main+0x15c>)
 8000d92:	f000 fd4f 	bl	8001834 <HAL_GPIO_WritePin>
	//				set(tester[0], tester[4]);

					if(current_button == 1){
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <main+0x164>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d101      	bne.n	8000da2 <main+0x12a>
						assign();
 8000d9e:	f7ff fb9d 	bl	80004dc <assign>
					}
					if (last_button == 1 && current_button == 0){
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <main+0x168>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d105      	bne.n	8000db6 <main+0x13e>
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <main+0x164>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <main+0x13e>
						check_it();
 8000db2:	f7ff fc55 	bl	8000660 <check_it>
					}

				last_button = current_button;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <main+0x164>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <main+0x168>)
 8000dbc:	6013      	str	r3, [r2, #0]
				state = 0;
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <main+0x158>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
				break;
 8000dc4:	e000      	b.n	8000dc8 <main+0x150>

			}

		}
 8000dc6:	bf00      	nop
	{
 8000dc8:	e761      	b.n	8000c8e <main+0x16>
 8000dca:	bf00      	nop
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	200000f0 	.word	0x200000f0
 8000dd4:	40020800 	.word	0x40020800
 8000dd8:	40020400 	.word	0x40020400
 8000ddc:	200000f4 	.word	0x200000f4
 8000de0:	200000f8 	.word	0x200000f8

08000de4 <SystemClock_Config>:
}
			/**
			 * @brief System Clock Configuration
			 * @retval None
			 */
			void SystemClock_Config(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b094      	sub	sp, #80	; 0x50
 8000de8:	af00      	add	r7, sp, #0
				RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000dea:	f107 0320 	add.w	r3, r7, #32
 8000dee:	2230      	movs	r2, #48	; 0x30
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f001 fcb6 	bl	8002764 <memset>
				RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]

				/** Configure the main internal regulator output voltage
				 */
				__HAL_RCC_PWR_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <SystemClock_Config+0xcc>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <SystemClock_Config+0xcc>)
 8000e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e16:	6413      	str	r3, [r2, #64]	; 0x40
 8000e18:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <SystemClock_Config+0xcc>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
				__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e24:	2300      	movs	r3, #0
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <SystemClock_Config+0xd0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a21      	ldr	r2, [pc, #132]	; (8000eb4 <SystemClock_Config+0xd0>)
 8000e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <SystemClock_Config+0xd0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]

				/** Initializes the RCC Oscillators according to the specified parameters
				 * in the RCC_OscInitTypeDef structure.
				 */
				RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e40:	2302      	movs	r3, #2
 8000e42:	623b      	str	r3, [r7, #32]
				RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e44:	2301      	movs	r3, #1
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
				RCC_OscInitStruct.HSICalibrationValue =
 8000e48:	2310      	movs	r3, #16
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
						RCC_HSICALIBRATION_DEFAULT;
				RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
				RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e50:	2300      	movs	r3, #0
 8000e52:	63fb      	str	r3, [r7, #60]	; 0x3c
				RCC_OscInitStruct.PLL.PLLM = 16;
 8000e54:	2310      	movs	r3, #16
 8000e56:	643b      	str	r3, [r7, #64]	; 0x40
				RCC_OscInitStruct.PLL.PLLN = 336;
 8000e58:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e5c:	647b      	str	r3, [r7, #68]	; 0x44
				RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	64bb      	str	r3, [r7, #72]	; 0x48
				RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e62:	2304      	movs	r3, #4
 8000e64:	64fb      	str	r3, [r7, #76]	; 0x4c
				if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fcfc 	bl	8001868 <HAL_RCC_OscConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x96>
					Error_Handler();
 8000e76:	f000 f90d 	bl	8001094 <Error_Handler>
				}

				/** Initializes the CPU, AHB and APB buses clocks
				 */
				RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	60fb      	str	r3, [r7, #12]
						| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
						| RCC_CLOCKTYPE_PCLK2;
				RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	613b      	str	r3, [r7, #16]
				RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
				RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8a:	61bb      	str	r3, [r7, #24]
				RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]

				if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	2102      	movs	r1, #2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 ff5e 	bl	8001d58 <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0xc2>
						!= HAL_OK) {
					Error_Handler();
 8000ea2:	f000 f8f7 	bl	8001094 <Error_Handler>
				}
			}
 8000ea6:	bf00      	nop
 8000ea8:	3750      	adds	r7, #80	; 0x50
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40007000 	.word	0x40007000

08000eb8 <MX_USART2_UART_Init>:
			/**
			 * @brief USART2 Initialization Function
			 * @param None
			 * @retval None
			 */
			static void MX_USART2_UART_Init(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
				/* USER CODE END USART2_Init 0 */

				/* USER CODE BEGIN USART2_Init 1 */

				/* USER CODE END USART2_Init 1 */
				huart2.Instance = USART2;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <MX_USART2_UART_Init+0x50>)
 8000ec0:	601a      	str	r2, [r3, #0]
				huart2.Init.BaudRate = 115200;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
				huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
				huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
				huart2.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
				huart2.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
				huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
				huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
				if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ef0:	f001 f952 	bl	8002198 <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART2_UART_Init+0x46>
					Error_Handler();
 8000efa:	f000 f8cb 	bl	8001094 <Error_Handler>
				}
				/* USER CODE BEGIN USART2_Init 2 */

				/* USER CODE END USART2_Init 2 */

			}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000002c 	.word	0x2000002c
 8000f08:	40004400 	.word	0x40004400

08000f0c <MX_GPIO_Init>:
			/**
			 * @brief GPIO Initialization Function
			 * @param None
			 * @retval None
			 */
			static void MX_GPIO_Init(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
				GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

				/* GPIO Ports Clock Enable */
				__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b56      	ldr	r3, [pc, #344]	; (8001080 <MX_GPIO_Init+0x174>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a55      	ldr	r2, [pc, #340]	; (8001080 <MX_GPIO_Init+0x174>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b53      	ldr	r3, [pc, #332]	; (8001080 <MX_GPIO_Init+0x174>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
				__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b4f      	ldr	r3, [pc, #316]	; (8001080 <MX_GPIO_Init+0x174>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a4e      	ldr	r2, [pc, #312]	; (8001080 <MX_GPIO_Init+0x174>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b4c      	ldr	r3, [pc, #304]	; (8001080 <MX_GPIO_Init+0x174>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
				__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	4b48      	ldr	r3, [pc, #288]	; (8001080 <MX_GPIO_Init+0x174>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a47      	ldr	r2, [pc, #284]	; (8001080 <MX_GPIO_Init+0x174>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b45      	ldr	r3, [pc, #276]	; (8001080 <MX_GPIO_Init+0x174>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
				__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b41      	ldr	r3, [pc, #260]	; (8001080 <MX_GPIO_Init+0x174>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a40      	ldr	r2, [pc, #256]	; (8001080 <MX_GPIO_Init+0x174>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b3e      	ldr	r3, [pc, #248]	; (8001080 <MX_GPIO_Init+0x174>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
				__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	4b3a      	ldr	r3, [pc, #232]	; (8001080 <MX_GPIO_Init+0x174>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a39      	ldr	r2, [pc, #228]	; (8001080 <MX_GPIO_Init+0x174>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b37      	ldr	r3, [pc, #220]	; (8001080 <MX_GPIO_Init+0x174>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]

				/*Configure GPIO pin Output Level */
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	4834      	ldr	r0, [pc, #208]	; (8001084 <MX_GPIO_Init+0x178>)
 8000fb4:	f000 fc3e 	bl	8001834 <HAL_GPIO_WritePin>

				/*Configure GPIO pin Output Level */
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9,
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000fbe:	4832      	ldr	r0, [pc, #200]	; (8001088 <MX_GPIO_Init+0x17c>)
 8000fc0:	f000 fc38 	bl	8001834 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);

				/*Configure GPIO pin Output Level */
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fca:	4830      	ldr	r0, [pc, #192]	; (800108c <MX_GPIO_Init+0x180>)
 8000fcc:	f000 fc32 	bl	8001834 <HAL_GPIO_WritePin>

				/*Configure GPIO pin : B1_Pin */
				GPIO_InitStruct.Pin = B1_Pin;
 8000fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd4:	617b      	str	r3, [r7, #20]
				GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fda:	61bb      	str	r3, [r7, #24]
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
				HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4828      	ldr	r0, [pc, #160]	; (8001088 <MX_GPIO_Init+0x17c>)
 8000fe8:	f000 fa88 	bl	80014fc <HAL_GPIO_Init>

				/*Configure GPIO pin : LD2_Pin */
				GPIO_InitStruct.Pin = LD2_Pin;
 8000fec:	2320      	movs	r3, #32
 8000fee:	617b      	str	r3, [r7, #20]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61bb      	str	r3, [r7, #24]
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
				GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
				HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4820      	ldr	r0, [pc, #128]	; (8001084 <MX_GPIO_Init+0x178>)
 8001004:	f000 fa7a 	bl	80014fc <HAL_GPIO_Init>

				/*Configure GPIO pins : PC6 PC8 PC9 */
				GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9;
 8001008:	f44f 7350 	mov.w	r3, #832	; 0x340
 800100c:	617b      	str	r3, [r7, #20]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	61bb      	str	r3, [r7, #24]
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
				GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
				HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4819      	ldr	r0, [pc, #100]	; (8001088 <MX_GPIO_Init+0x17c>)
 8001022:	f000 fa6b 	bl	80014fc <HAL_GPIO_Init>

				/*Configure GPIO pins : PC10 PC11 PC12 */
				GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8001026:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800102a:	617b      	str	r3, [r7, #20]
				GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
				GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001030:	2301      	movs	r3, #1
 8001032:	61fb      	str	r3, [r7, #28]
				HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4813      	ldr	r0, [pc, #76]	; (8001088 <MX_GPIO_Init+0x17c>)
 800103c:	f000 fa5e 	bl	80014fc <HAL_GPIO_Init>

				/*Configure GPIO pin : PD2 */
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001040:	2304      	movs	r3, #4
 8001042:	617b      	str	r3, [r7, #20]
				GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
				GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001048:	2301      	movs	r3, #1
 800104a:	61fb      	str	r3, [r7, #28]
				HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	480f      	ldr	r0, [pc, #60]	; (8001090 <MX_GPIO_Init+0x184>)
 8001054:	f000 fa52 	bl	80014fc <HAL_GPIO_Init>

				/*Configure GPIO pin : PB8 */
				GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105c:	617b      	str	r3, [r7, #20]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	61bb      	str	r3, [r7, #24]
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
				GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
				HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4806      	ldr	r0, [pc, #24]	; (800108c <MX_GPIO_Init+0x180>)
 8001072:	f000 fa43 	bl	80014fc <HAL_GPIO_Init>

			}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40020000 	.word	0x40020000
 8001088:	40020800 	.word	0x40020800
 800108c:	40020400 	.word	0x40020400
 8001090:	40020c00 	.word	0x40020c00

08001094 <Error_Handler>:

			/**
			 * @brief  This function is executed in case of error occurrence.
			 * @retval None
			 */
			void Error_Handler(void) {
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
				/* USER CODE BEGIN Error_Handler_Debug */
				/* User can add his own implementation to report the HAL error return state */
				__disable_irq();
				while (1) {
 800109c:	e7fe      	b.n	800109c <Error_Handler+0x8>
	...

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <HAL_MspInit+0x4c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <HAL_MspInit+0x4c>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <HAL_MspInit+0x4c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_MspInit+0x4c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <HAL_MspInit+0x4c>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_MspInit+0x4c>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010de:	2007      	movs	r0, #7
 80010e0:	f000 f9d8 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40023800 	.word	0x40023800

080010f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a19      	ldr	r2, [pc, #100]	; (8001174 <HAL_UART_MspInit+0x84>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d12b      	bne.n	800116a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a17      	ldr	r2, [pc, #92]	; (8001178 <HAL_UART_MspInit+0x88>)
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a10      	ldr	r2, [pc, #64]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800114a:	230c      	movs	r3, #12
 800114c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800115a:	2307      	movs	r3, #7
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <HAL_UART_MspInit+0x8c>)
 8001166:	f000 f9c9 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40004400 	.word	0x40004400
 8001178:	40023800 	.word	0x40023800
 800117c:	40020000 	.word	0x40020000

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler+0x4>

08001186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <MemManage_Handler+0x4>

08001192 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <BusFault_Handler+0x4>

08001198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <UsageFault_Handler+0x4>

0800119e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011cc:	f000 f890 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <SystemInit+0x20>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <SystemInit+0x20>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001230 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011fe:	490e      	ldr	r1, [pc, #56]	; (8001238 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001214:	4c0b      	ldr	r4, [pc, #44]	; (8001244 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001222:	f7ff ffd7 	bl	80011d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001226:	f001 fa79 	bl	800271c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122a:	f7ff fd25 	bl	8000c78 <main>
  bx  lr    
 800122e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800123c:	080027b4 	.word	0x080027b4
  ldr r2, =_sbss
 8001240:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001244:	2000010c 	.word	0x2000010c

08001248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC_IRQHandler>
	...

0800124c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <HAL_Init+0x40>)
 8001256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0a      	ldr	r2, [pc, #40]	; (800128c <HAL_Init+0x40>)
 8001262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_Init+0x40>)
 800126e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f90d 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f808 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff ff0e 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023c00 	.word	0x40023c00

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f917 	bl	80014e2 <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f000 f8ed 	bl	80014aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000004 	.word	0x20000004
 80012e8:	2000000c 	.word	0x2000000c
 80012ec:	20000008 	.word	0x20000008

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	2000000c 	.word	0x2000000c
 8001314:	20000108 	.word	0x20000108

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000108 	.word	0x20000108

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001460:	d301      	bcc.n	8001466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001462:	2301      	movs	r3, #1
 8001464:	e00f      	b.n	8001486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <SysTick_Config+0x40>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	210f      	movs	r1, #15
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f7ff ff8e 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SysTick_Config+0x40>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SysTick_Config+0x40>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff47 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff5c 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff8e 	bl	80013e8 <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5d 	bl	8001394 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffb0 	bl	8001450 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	e159      	b.n	80017cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001518:	2201      	movs	r2, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	429a      	cmp	r2, r3
 8001532:	f040 8148 	bne.w	80017c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d005      	beq.n	800154e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154a:	2b02      	cmp	r3, #2
 800154c:	d130      	bne.n	80015b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 0201 	and.w	r2, r3, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d017      	beq.n	80015ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d123      	bne.n	8001640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	69b9      	ldr	r1, [r7, #24]
 800163c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0203 	and.w	r2, r3, #3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80a2 	beq.w	80017c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b57      	ldr	r3, [pc, #348]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a56      	ldr	r2, [pc, #344]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169e:	4a52      	ldr	r2, [pc, #328]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a49      	ldr	r2, [pc, #292]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d019      	beq.n	80016fe <HAL_GPIO_Init+0x202>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a48      	ldr	r2, [pc, #288]	; (80017f0 <HAL_GPIO_Init+0x2f4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d013      	beq.n	80016fa <HAL_GPIO_Init+0x1fe>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a47      	ldr	r2, [pc, #284]	; (80017f4 <HAL_GPIO_Init+0x2f8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00d      	beq.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a46      	ldr	r2, [pc, #280]	; (80017f8 <HAL_GPIO_Init+0x2fc>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d007      	beq.n	80016f2 <HAL_GPIO_Init+0x1f6>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a45      	ldr	r2, [pc, #276]	; (80017fc <HAL_GPIO_Init+0x300>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d101      	bne.n	80016ee <HAL_GPIO_Init+0x1f2>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e008      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016ee:	2307      	movs	r3, #7
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016f2:	2303      	movs	r3, #3
 80016f4:	e004      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e002      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016fe:	2300      	movs	r3, #0
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	f002 0203 	and.w	r2, r2, #3
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	4093      	lsls	r3, r2
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001710:	4935      	ldr	r1, [pc, #212]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001742:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_GPIO_Init+0x304>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800176c:	4a24      	ldr	r2, [pc, #144]	; (8001800 <HAL_GPIO_Init+0x304>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001796:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_GPIO_Init+0x304>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017c0:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <HAL_GPIO_Init+0x304>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3301      	adds	r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	2b0f      	cmp	r3, #15
 80017d0:	f67f aea2 	bls.w	8001518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40013800 	.word	0x40013800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	40021000 	.word	0x40021000
 8001800:	40013c00 	.word	0x40013c00

08001804 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
 8001820:	e001      	b.n	8001826 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001826:	7bfb      	ldrb	r3, [r7, #15]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001844:	787b      	ldrb	r3, [r7, #1]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001850:	e003      	b.n	800185a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	041a      	lsls	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	619a      	str	r2, [r3, #24]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e267      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d075      	beq.n	8001972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001886:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b04      	cmp	r3, #4
 8001890:	d00c      	beq.n	80018ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001892:	4b85      	ldr	r3, [pc, #532]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800189a:	2b08      	cmp	r3, #8
 800189c:	d112      	bne.n	80018c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189e:	4b82      	ldr	r3, [pc, #520]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018aa:	d10b      	bne.n	80018c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	4b7e      	ldr	r3, [pc, #504]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d05b      	beq.n	8001970 <HAL_RCC_OscConfig+0x108>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d157      	bne.n	8001970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e242      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018cc:	d106      	bne.n	80018dc <HAL_RCC_OscConfig+0x74>
 80018ce:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a75      	ldr	r2, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e01d      	b.n	8001918 <HAL_RCC_OscConfig+0xb0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x98>
 80018e6:	4b70      	ldr	r3, [pc, #448]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a6f      	ldr	r2, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a6c      	ldr	r2, [pc, #432]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0xb0>
 8001900:	4b69      	ldr	r3, [pc, #420]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a68      	ldr	r2, [pc, #416]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a65      	ldr	r2, [pc, #404]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fcfa 	bl	8001318 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fcf6 	bl	8001318 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e207      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0xc0>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fce6 	bl	8001318 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fce2 	bl	8001318 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1f3      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	4b51      	ldr	r3, [pc, #324]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0xe8>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d063      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197e:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00b      	beq.n	80019a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198a:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001992:	2b08      	cmp	r3, #8
 8001994:	d11c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001996:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d116      	bne.n	80019d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <HAL_RCC_OscConfig+0x152>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e1c7      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4937      	ldr	r1, [pc, #220]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ce:	e03a      	b.n	8001a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d020      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d8:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_RCC_OscConfig+0x244>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff fc9b 	bl	8001318 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff fc97 	bl	8001318 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1a8      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4925      	ldr	r1, [pc, #148]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	e015      	b.n	8001a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_RCC_OscConfig+0x244>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff fc7a 	bl	8001318 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a28:	f7ff fc76 	bl	8001318 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e187      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d036      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d016      	beq.n	8001a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_RCC_OscConfig+0x248>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff fc5a 	bl	8001318 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff fc56 	bl	8001318 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e167      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x200>
 8001a86:	e01b      	b.n	8001ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_OscConfig+0x248>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fc43 	bl	8001318 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	e00e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a96:	f7ff fc3f 	bl	8001318 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d907      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e150      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	42470000 	.word	0x42470000
 8001ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ea      	bne.n	8001a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 8097 	beq.w	8001bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad2:	4b81      	ldr	r3, [pc, #516]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10f      	bne.n	8001afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	4b7d      	ldr	r3, [pc, #500]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a7c      	ldr	r2, [pc, #496]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d118      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0a:	4b74      	ldr	r3, [pc, #464]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a73      	ldr	r2, [pc, #460]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fbff 	bl	8001318 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1e:	f7ff fbfb 	bl	8001318 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e10c      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2ea>
 8001b44:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a63      	ldr	r2, [pc, #396]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	e01c      	b.n	8001b8c <HAL_RCC_OscConfig+0x324>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x30c>
 8001b5a:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a5e      	ldr	r2, [pc, #376]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
 8001b66:	4b5c      	ldr	r3, [pc, #368]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a5b      	ldr	r2, [pc, #364]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0x324>
 8001b74:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a57      	ldr	r2, [pc, #348]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	4b55      	ldr	r3, [pc, #340]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a54      	ldr	r2, [pc, #336]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b86:	f023 0304 	bic.w	r3, r3, #4
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d015      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff fbc0 	bl	8001318 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fbbc 	bl	8001318 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0cb      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb2:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0ee      	beq.n	8001b9c <HAL_RCC_OscConfig+0x334>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fbaa 	bl	8001318 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fba6 	bl	8001318 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0b5      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bde:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ee      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d105      	bne.n	8001bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	4a38      	ldr	r2, [pc, #224]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a1 	beq.w	8001d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d05c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d141      	bne.n	8001c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fb7a 	bl	8001318 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff fb76 	bl	8001318 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e087      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	019b      	lsls	r3, r3, #6
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	085b      	lsrs	r3, r3, #1
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	491b      	ldr	r1, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fb4f 	bl	8001318 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff fb4b 	bl	8001318 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e05c      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x416>
 8001c9c:	e054      	b.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fb38 	bl	8001318 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff fb34 	bl	8001318 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e045      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x444>
 8001cca:	e03d      	b.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e038      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x4ec>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d028      	beq.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d121      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d11a      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d14:	4013      	ands	r3, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d111      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0cc      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d90c      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b8      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	494d      	ldr	r1, [pc, #308]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d044      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d119      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e06f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e067      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4934      	ldr	r1, [pc, #208]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e48:	f7ff fa66 	bl	8001318 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e50:	f7ff fa62 	bl	8001318 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e04f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 020c 	and.w	r2, r3, #12
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1eb      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d20c      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e032      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4916      	ldr	r1, [pc, #88]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ede:	f000 f821 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	490a      	ldr	r1, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	5ccb      	ldrb	r3, [r1, r3]
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f9c6 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023c00 	.word	0x40023c00
 8001f14:	40023800 	.word	0x40023800
 8001f18:	0800278c 	.word	0x0800278c
 8001f1c:	20000004 	.word	0x20000004
 8001f20:	20000008 	.word	0x20000008

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f28:	b094      	sub	sp, #80	; 0x50
 8001f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f30:	2300      	movs	r3, #0
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f34:	2300      	movs	r3, #0
 8001f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f3c:	4b79      	ldr	r3, [pc, #484]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d00d      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x40>
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	f200 80e1 	bhi.w	8002110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x34>
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f56:	e0db      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f58:	4b73      	ldr	r3, [pc, #460]	; (8002128 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f5c:	e0db      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f5e:	4b73      	ldr	r3, [pc, #460]	; (800212c <HAL_RCC_GetSysClockFreq+0x208>)
 8001f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f62:	e0d8      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f64:	4b6f      	ldr	r3, [pc, #444]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f6e:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d063      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f7a:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	2200      	movs	r2, #0
 8001f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8e:	2300      	movs	r3, #0
 8001f90:	637b      	str	r3, [r7, #52]	; 0x34
 8001f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f96:	4622      	mov	r2, r4
 8001f98:	462b      	mov	r3, r5
 8001f9a:	f04f 0000 	mov.w	r0, #0
 8001f9e:	f04f 0100 	mov.w	r1, #0
 8001fa2:	0159      	lsls	r1, r3, #5
 8001fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa8:	0150      	lsls	r0, r2, #5
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4621      	mov	r1, r4
 8001fb0:	1a51      	subs	r1, r2, r1
 8001fb2:	6139      	str	r1, [r7, #16]
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fc8:	4659      	mov	r1, fp
 8001fca:	018b      	lsls	r3, r1, #6
 8001fcc:	4651      	mov	r1, sl
 8001fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fd2:	4651      	mov	r1, sl
 8001fd4:	018a      	lsls	r2, r1, #6
 8001fd6:	4651      	mov	r1, sl
 8001fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8001fdc:	4659      	mov	r1, fp
 8001fde:	eb63 0901 	sbc.w	r9, r3, r1
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ff6:	4690      	mov	r8, r2
 8001ff8:	4699      	mov	r9, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	eb18 0303 	adds.w	r3, r8, r3
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	462b      	mov	r3, r5
 8002004:	eb49 0303 	adc.w	r3, r9, r3
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002016:	4629      	mov	r1, r5
 8002018:	024b      	lsls	r3, r1, #9
 800201a:	4621      	mov	r1, r4
 800201c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002020:	4621      	mov	r1, r4
 8002022:	024a      	lsls	r2, r1, #9
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202a:	2200      	movs	r2, #0
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
 800202e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002034:	f7fe f8d0 	bl	80001d8 <__aeabi_uldivmod>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4613      	mov	r3, r2
 800203e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002040:	e058      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002042:	4b38      	ldr	r3, [pc, #224]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	099b      	lsrs	r3, r3, #6
 8002048:	2200      	movs	r2, #0
 800204a:	4618      	mov	r0, r3
 800204c:	4611      	mov	r1, r2
 800204e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
 8002058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800205c:	4642      	mov	r2, r8
 800205e:	464b      	mov	r3, r9
 8002060:	f04f 0000 	mov.w	r0, #0
 8002064:	f04f 0100 	mov.w	r1, #0
 8002068:	0159      	lsls	r1, r3, #5
 800206a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800206e:	0150      	lsls	r0, r2, #5
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4641      	mov	r1, r8
 8002076:	ebb2 0a01 	subs.w	sl, r2, r1
 800207a:	4649      	mov	r1, r9
 800207c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800208c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002094:	ebb2 040a 	subs.w	r4, r2, sl
 8002098:	eb63 050b 	sbc.w	r5, r3, fp
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	00eb      	lsls	r3, r5, #3
 80020a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020aa:	00e2      	lsls	r2, r4, #3
 80020ac:	4614      	mov	r4, r2
 80020ae:	461d      	mov	r5, r3
 80020b0:	4643      	mov	r3, r8
 80020b2:	18e3      	adds	r3, r4, r3
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	464b      	mov	r3, r9
 80020b8:	eb45 0303 	adc.w	r3, r5, r3
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ca:	4629      	mov	r1, r5
 80020cc:	028b      	lsls	r3, r1, #10
 80020ce:	4621      	mov	r1, r4
 80020d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020d4:	4621      	mov	r1, r4
 80020d6:	028a      	lsls	r2, r1, #10
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020de:	2200      	movs	r2, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	61fa      	str	r2, [r7, #28]
 80020e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e8:	f7fe f876 	bl	80001d8 <__aeabi_uldivmod>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4613      	mov	r3, r2
 80020f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	3301      	adds	r3, #1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002108:	fbb2 f3f3 	udiv	r3, r2, r3
 800210c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800210e:	e002      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCC_GetSysClockFreq+0x204>)
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002118:	4618      	mov	r0, r3
 800211a:	3750      	adds	r7, #80	; 0x50
 800211c:	46bd      	mov	sp, r7
 800211e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	00f42400 	.word	0x00f42400
 800212c:	007a1200 	.word	0x007a1200

08002130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_RCC_GetHCLKFreq+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000004 	.word	0x20000004

08002148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800214c:	f7ff fff0 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	0a9b      	lsrs	r3, r3, #10
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4903      	ldr	r1, [pc, #12]	; (800216c <HAL_RCC_GetPCLK1Freq+0x24>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40023800 	.word	0x40023800
 800216c:	0800279c 	.word	0x0800279c

08002170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002174:	f7ff ffdc 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	0b5b      	lsrs	r3, r3, #13
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4903      	ldr	r1, [pc, #12]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40023800 	.word	0x40023800
 8002194:	0800279c 	.word	0x0800279c

08002198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e03f      	b.n	800222a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe ff96 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2224      	movs	r2, #36	; 0x24
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f829 	bl	8002234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002238:	b0c0      	sub	sp, #256	; 0x100
 800223a:	af00      	add	r7, sp, #0
 800223c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800224c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002250:	68d9      	ldr	r1, [r3, #12]
 8002252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	ea40 0301 	orr.w	r3, r0, r1
 800225c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800225e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	431a      	orrs	r2, r3
 800226c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	431a      	orrs	r2, r3
 8002274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800228c:	f021 010c 	bic.w	r1, r1, #12
 8002290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800229a:	430b      	orrs	r3, r1
 800229c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800229e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80022aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ae:	6999      	ldr	r1, [r3, #24]
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	ea40 0301 	orr.w	r3, r0, r1
 80022ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b8f      	ldr	r3, [pc, #572]	; (8002500 <UART_SetConfig+0x2cc>)
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d005      	beq.n	80022d4 <UART_SetConfig+0xa0>
 80022c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4b8d      	ldr	r3, [pc, #564]	; (8002504 <UART_SetConfig+0x2d0>)
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d104      	bne.n	80022de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022d4:	f7ff ff4c 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
 80022d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80022dc:	e003      	b.n	80022e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022de:	f7ff ff33 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 80022e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022f0:	f040 810c 	bne.w	800250c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022f8:	2200      	movs	r2, #0
 80022fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002302:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002306:	4622      	mov	r2, r4
 8002308:	462b      	mov	r3, r5
 800230a:	1891      	adds	r1, r2, r2
 800230c:	65b9      	str	r1, [r7, #88]	; 0x58
 800230e:	415b      	adcs	r3, r3
 8002310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002312:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002316:	4621      	mov	r1, r4
 8002318:	eb12 0801 	adds.w	r8, r2, r1
 800231c:	4629      	mov	r1, r5
 800231e:	eb43 0901 	adc.w	r9, r3, r1
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800232e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002336:	4690      	mov	r8, r2
 8002338:	4699      	mov	r9, r3
 800233a:	4623      	mov	r3, r4
 800233c:	eb18 0303 	adds.w	r3, r8, r3
 8002340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002344:	462b      	mov	r3, r5
 8002346:	eb49 0303 	adc.w	r3, r9, r3
 800234a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800234e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800235a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800235e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002362:	460b      	mov	r3, r1
 8002364:	18db      	adds	r3, r3, r3
 8002366:	653b      	str	r3, [r7, #80]	; 0x50
 8002368:	4613      	mov	r3, r2
 800236a:	eb42 0303 	adc.w	r3, r2, r3
 800236e:	657b      	str	r3, [r7, #84]	; 0x54
 8002370:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002374:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002378:	f7fd ff2e 	bl	80001d8 <__aeabi_uldivmod>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4b61      	ldr	r3, [pc, #388]	; (8002508 <UART_SetConfig+0x2d4>)
 8002382:	fba3 2302 	umull	r2, r3, r3, r2
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	011c      	lsls	r4, r3, #4
 800238a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800238e:	2200      	movs	r2, #0
 8002390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002394:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002398:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800239c:	4642      	mov	r2, r8
 800239e:	464b      	mov	r3, r9
 80023a0:	1891      	adds	r1, r2, r2
 80023a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80023a4:	415b      	adcs	r3, r3
 80023a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023ac:	4641      	mov	r1, r8
 80023ae:	eb12 0a01 	adds.w	sl, r2, r1
 80023b2:	4649      	mov	r1, r9
 80023b4:	eb43 0b01 	adc.w	fp, r3, r1
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023cc:	4692      	mov	sl, r2
 80023ce:	469b      	mov	fp, r3
 80023d0:	4643      	mov	r3, r8
 80023d2:	eb1a 0303 	adds.w	r3, sl, r3
 80023d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023da:	464b      	mov	r3, r9
 80023dc:	eb4b 0303 	adc.w	r3, fp, r3
 80023e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80023f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80023f8:	460b      	mov	r3, r1
 80023fa:	18db      	adds	r3, r3, r3
 80023fc:	643b      	str	r3, [r7, #64]	; 0x40
 80023fe:	4613      	mov	r3, r2
 8002400:	eb42 0303 	adc.w	r3, r2, r3
 8002404:	647b      	str	r3, [r7, #68]	; 0x44
 8002406:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800240a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800240e:	f7fd fee3 	bl	80001d8 <__aeabi_uldivmod>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4611      	mov	r1, r2
 8002418:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <UART_SetConfig+0x2d4>)
 800241a:	fba3 2301 	umull	r2, r3, r3, r1
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2264      	movs	r2, #100	; 0x64
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	1acb      	subs	r3, r1, r3
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800242e:	4b36      	ldr	r3, [pc, #216]	; (8002508 <UART_SetConfig+0x2d4>)
 8002430:	fba3 2302 	umull	r2, r3, r3, r2
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800243c:	441c      	add	r4, r3
 800243e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002442:	2200      	movs	r2, #0
 8002444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002448:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800244c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002450:	4642      	mov	r2, r8
 8002452:	464b      	mov	r3, r9
 8002454:	1891      	adds	r1, r2, r2
 8002456:	63b9      	str	r1, [r7, #56]	; 0x38
 8002458:	415b      	adcs	r3, r3
 800245a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800245c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002460:	4641      	mov	r1, r8
 8002462:	1851      	adds	r1, r2, r1
 8002464:	6339      	str	r1, [r7, #48]	; 0x30
 8002466:	4649      	mov	r1, r9
 8002468:	414b      	adcs	r3, r1
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002478:	4659      	mov	r1, fp
 800247a:	00cb      	lsls	r3, r1, #3
 800247c:	4651      	mov	r1, sl
 800247e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002482:	4651      	mov	r1, sl
 8002484:	00ca      	lsls	r2, r1, #3
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	4603      	mov	r3, r0
 800248c:	4642      	mov	r2, r8
 800248e:	189b      	adds	r3, r3, r2
 8002490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002494:	464b      	mov	r3, r9
 8002496:	460a      	mov	r2, r1
 8002498:	eb42 0303 	adc.w	r3, r2, r3
 800249c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80024ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80024b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80024b4:	460b      	mov	r3, r1
 80024b6:	18db      	adds	r3, r3, r3
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ba:	4613      	mov	r3, r2
 80024bc:	eb42 0303 	adc.w	r3, r2, r3
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80024ca:	f7fd fe85 	bl	80001d8 <__aeabi_uldivmod>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <UART_SetConfig+0x2d4>)
 80024d4:	fba3 1302 	umull	r1, r3, r3, r2
 80024d8:	095b      	lsrs	r3, r3, #5
 80024da:	2164      	movs	r1, #100	; 0x64
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	3332      	adds	r3, #50	; 0x32
 80024e6:	4a08      	ldr	r2, [pc, #32]	; (8002508 <UART_SetConfig+0x2d4>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	f003 0207 	and.w	r2, r3, #7
 80024f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4422      	add	r2, r4
 80024fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024fc:	e105      	b.n	800270a <UART_SetConfig+0x4d6>
 80024fe:	bf00      	nop
 8002500:	40011000 	.word	0x40011000
 8002504:	40011400 	.word	0x40011400
 8002508:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800250c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002510:	2200      	movs	r2, #0
 8002512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002516:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800251a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800251e:	4642      	mov	r2, r8
 8002520:	464b      	mov	r3, r9
 8002522:	1891      	adds	r1, r2, r2
 8002524:	6239      	str	r1, [r7, #32]
 8002526:	415b      	adcs	r3, r3
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
 800252a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800252e:	4641      	mov	r1, r8
 8002530:	1854      	adds	r4, r2, r1
 8002532:	4649      	mov	r1, r9
 8002534:	eb43 0501 	adc.w	r5, r3, r1
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	00eb      	lsls	r3, r5, #3
 8002542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002546:	00e2      	lsls	r2, r4, #3
 8002548:	4614      	mov	r4, r2
 800254a:	461d      	mov	r5, r3
 800254c:	4643      	mov	r3, r8
 800254e:	18e3      	adds	r3, r4, r3
 8002550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002554:	464b      	mov	r3, r9
 8002556:	eb45 0303 	adc.w	r3, r5, r3
 800255a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800255e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800256a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800257a:	4629      	mov	r1, r5
 800257c:	008b      	lsls	r3, r1, #2
 800257e:	4621      	mov	r1, r4
 8002580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002584:	4621      	mov	r1, r4
 8002586:	008a      	lsls	r2, r1, #2
 8002588:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800258c:	f7fd fe24 	bl	80001d8 <__aeabi_uldivmod>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4b60      	ldr	r3, [pc, #384]	; (8002718 <UART_SetConfig+0x4e4>)
 8002596:	fba3 2302 	umull	r2, r3, r3, r2
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	011c      	lsls	r4, r3, #4
 800259e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025a2:	2200      	movs	r2, #0
 80025a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80025b0:	4642      	mov	r2, r8
 80025b2:	464b      	mov	r3, r9
 80025b4:	1891      	adds	r1, r2, r2
 80025b6:	61b9      	str	r1, [r7, #24]
 80025b8:	415b      	adcs	r3, r3
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025c0:	4641      	mov	r1, r8
 80025c2:	1851      	adds	r1, r2, r1
 80025c4:	6139      	str	r1, [r7, #16]
 80025c6:	4649      	mov	r1, r9
 80025c8:	414b      	adcs	r3, r1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025d8:	4659      	mov	r1, fp
 80025da:	00cb      	lsls	r3, r1, #3
 80025dc:	4651      	mov	r1, sl
 80025de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025e2:	4651      	mov	r1, sl
 80025e4:	00ca      	lsls	r2, r1, #3
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	4642      	mov	r2, r8
 80025ee:	189b      	adds	r3, r3, r2
 80025f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025f4:	464b      	mov	r3, r9
 80025f6:	460a      	mov	r2, r1
 80025f8:	eb42 0303 	adc.w	r3, r2, r3
 80025fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	67bb      	str	r3, [r7, #120]	; 0x78
 800260a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002618:	4649      	mov	r1, r9
 800261a:	008b      	lsls	r3, r1, #2
 800261c:	4641      	mov	r1, r8
 800261e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002622:	4641      	mov	r1, r8
 8002624:	008a      	lsls	r2, r1, #2
 8002626:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800262a:	f7fd fdd5 	bl	80001d8 <__aeabi_uldivmod>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4b39      	ldr	r3, [pc, #228]	; (8002718 <UART_SetConfig+0x4e4>)
 8002634:	fba3 1302 	umull	r1, r3, r3, r2
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	2164      	movs	r1, #100	; 0x64
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	3332      	adds	r3, #50	; 0x32
 8002646:	4a34      	ldr	r2, [pc, #208]	; (8002718 <UART_SetConfig+0x4e4>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002652:	441c      	add	r4, r3
 8002654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002658:	2200      	movs	r2, #0
 800265a:	673b      	str	r3, [r7, #112]	; 0x70
 800265c:	677a      	str	r2, [r7, #116]	; 0x74
 800265e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002662:	4642      	mov	r2, r8
 8002664:	464b      	mov	r3, r9
 8002666:	1891      	adds	r1, r2, r2
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	415b      	adcs	r3, r3
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002672:	4641      	mov	r1, r8
 8002674:	1851      	adds	r1, r2, r1
 8002676:	6039      	str	r1, [r7, #0]
 8002678:	4649      	mov	r1, r9
 800267a:	414b      	adcs	r3, r1
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800268a:	4659      	mov	r1, fp
 800268c:	00cb      	lsls	r3, r1, #3
 800268e:	4651      	mov	r1, sl
 8002690:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002694:	4651      	mov	r1, sl
 8002696:	00ca      	lsls	r2, r1, #3
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	4603      	mov	r3, r0
 800269e:	4642      	mov	r2, r8
 80026a0:	189b      	adds	r3, r3, r2
 80026a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80026a4:	464b      	mov	r3, r9
 80026a6:	460a      	mov	r2, r1
 80026a8:	eb42 0303 	adc.w	r3, r2, r3
 80026ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	663b      	str	r3, [r7, #96]	; 0x60
 80026b8:	667a      	str	r2, [r7, #100]	; 0x64
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80026c6:	4649      	mov	r1, r9
 80026c8:	008b      	lsls	r3, r1, #2
 80026ca:	4641      	mov	r1, r8
 80026cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026d0:	4641      	mov	r1, r8
 80026d2:	008a      	lsls	r2, r1, #2
 80026d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026d8:	f7fd fd7e 	bl	80001d8 <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <UART_SetConfig+0x4e4>)
 80026e2:	fba3 1302 	umull	r1, r3, r3, r2
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2164      	movs	r1, #100	; 0x64
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	3332      	adds	r3, #50	; 0x32
 80026f4:	4a08      	ldr	r2, [pc, #32]	; (8002718 <UART_SetConfig+0x4e4>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	f003 020f 	and.w	r2, r3, #15
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4422      	add	r2, r4
 8002708:	609a      	str	r2, [r3, #8]
}
 800270a:	bf00      	nop
 800270c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002710:	46bd      	mov	sp, r7
 8002712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002716:	bf00      	nop
 8002718:	51eb851f 	.word	0x51eb851f

0800271c <__libc_init_array>:
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	4d0d      	ldr	r5, [pc, #52]	; (8002754 <__libc_init_array+0x38>)
 8002720:	4c0d      	ldr	r4, [pc, #52]	; (8002758 <__libc_init_array+0x3c>)
 8002722:	1b64      	subs	r4, r4, r5
 8002724:	10a4      	asrs	r4, r4, #2
 8002726:	2600      	movs	r6, #0
 8002728:	42a6      	cmp	r6, r4
 800272a:	d109      	bne.n	8002740 <__libc_init_array+0x24>
 800272c:	4d0b      	ldr	r5, [pc, #44]	; (800275c <__libc_init_array+0x40>)
 800272e:	4c0c      	ldr	r4, [pc, #48]	; (8002760 <__libc_init_array+0x44>)
 8002730:	f000 f820 	bl	8002774 <_init>
 8002734:	1b64      	subs	r4, r4, r5
 8002736:	10a4      	asrs	r4, r4, #2
 8002738:	2600      	movs	r6, #0
 800273a:	42a6      	cmp	r6, r4
 800273c:	d105      	bne.n	800274a <__libc_init_array+0x2e>
 800273e:	bd70      	pop	{r4, r5, r6, pc}
 8002740:	f855 3b04 	ldr.w	r3, [r5], #4
 8002744:	4798      	blx	r3
 8002746:	3601      	adds	r6, #1
 8002748:	e7ee      	b.n	8002728 <__libc_init_array+0xc>
 800274a:	f855 3b04 	ldr.w	r3, [r5], #4
 800274e:	4798      	blx	r3
 8002750:	3601      	adds	r6, #1
 8002752:	e7f2      	b.n	800273a <__libc_init_array+0x1e>
 8002754:	080027ac 	.word	0x080027ac
 8002758:	080027ac 	.word	0x080027ac
 800275c:	080027ac 	.word	0x080027ac
 8002760:	080027b0 	.word	0x080027b0

08002764 <memset>:
 8002764:	4402      	add	r2, r0
 8002766:	4603      	mov	r3, r0
 8002768:	4293      	cmp	r3, r2
 800276a:	d100      	bne.n	800276e <memset+0xa>
 800276c:	4770      	bx	lr
 800276e:	f803 1b01 	strb.w	r1, [r3], #1
 8002772:	e7f9      	b.n	8002768 <memset+0x4>

08002774 <_init>:
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	bf00      	nop
 8002778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277a:	bc08      	pop	{r3}
 800277c:	469e      	mov	lr, r3
 800277e:	4770      	bx	lr

08002780 <_fini>:
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	bf00      	nop
 8002784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002786:	bc08      	pop	{r3}
 8002788:	469e      	mov	lr, r3
 800278a:	4770      	bx	lr
